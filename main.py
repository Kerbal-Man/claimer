import requests
import threading
import time
import calendar
import datetime
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
input("To initiate the claimer, press Enter.     ")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print(" ██████╗██╗      █████╗ ██╗███╗   ███╗███████╗██████╗")
print("██╔════╝██║     ██╔══██╗██║████╗ ████║██╔════╝██╔══██╗")
print("██║     ██║     ███████║██║██╔████╔██║█████╗  ██████╔╝")
print("██║     ██║     ██╔══██║██║██║╚██╔╝██║██╔══╝  ██╔══██╗")
print("╚██████╗███████╗██║  ██║██║██║ ╚═╝ ██║███████╗██║  ██║")
print(" ╚═════╝╚══════╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝")
print("                                                      ")
print("")
print("This claimer is automatic and doesn't check for name availability. Use at your own risk. Made by slow#9116 on Discord, NameMC on GitHub.")
print("")
print("Type 'go' to configure the claimer.")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
print("")
choice = input("")
if choice == 'go':
        target = input("Desired username: ")
        token = "Bearer " + input("Authorization token:   ")
        number_of_threads = int(input("Number of requests: ")) 
        print(f"Attempting to claim {target}")
else:
    print("Invalid choice. Closing program.")
    exit()
ts = ("@")
def check_name(): 
  while True:
    r = requests.put(f"https://api.minecraftservices.com/minecraft/profile/name/{target}", headers={"Authorization": f"{token}"})
    print(r.status_code)
    if r.status_code == 403:
        #print(r.text)
        def timestamps():
            ts = (r.status_code)
        def append_timestamp(reqtime):
            timestamp = calendar.timegm(time.gmtime())
            human_readable = datetime.datetime.fromtimestamp(timestamp).isoformat()
            filename_with_timestamp = ts + str(human_readable)
            return filename_with_timestamp
    print(append_timestamp("CODE"))
    time.sleep(60) 
    if r.status_code == 429:
      print("Client is ratelimited. Retrying in 5 minutes.")
      #print(r.text)
      time.sleep(300) 
    if r.status_code == 200:
      print("Username changed successfully. Closing program in 10 seconds.")
      #print(r.text)
      time.sleep(10) 
      exit()
    if r.status_code == 401:
      print("Client did not supply valid authorization token. Ending program in 10 seconds.")
      #print(r.text)
      time.sleep(10) 
for __ in range(number_of_threads):
  threading.Thread(target=check_name).start()


# To-do : Make sleep time configurable